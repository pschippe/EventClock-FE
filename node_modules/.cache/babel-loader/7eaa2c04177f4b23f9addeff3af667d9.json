{"ast":null,"code":"import _defineProperty from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/src/components/MasterCountdown.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nvar MasterCountdown =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MasterCountdown, _Component);\n\n  function MasterCountdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MasterCountdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MasterCountdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.startTimer = function () {\n      _this.props.dispatch({\n        type: 'MASTER_TIMER_SET_ALL',\n        payload: {\n          timerOn: true,\n          timerCount: _this.props.store.currentTime.timerTime,\n          timerStart: _this.props.store.currentTime.timerTime\n        }\n      }); // Creates Promises for all clocks if different endpoints are needed\n      // Hope only one endpoint is needed\n      // First create empty array\n\n\n      var apiArray = []; // Fill using a for loop\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.store.countdownTimers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var clock = _step.value;\n\n          var apiObj = _objectSpread({}, _this.props.store.currentTime, {\n            id: clock.id,\n            status: 'start'\n          });\n\n          apiArray.push(Api.postTime(apiObj));\n        } // Send promise for all\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      Promise.all(apiArray) // Then is a response to make sure that it was successful to hit api\n      .then(function (response) {\n        window.setTimeout(function () {\n          _this.startTimer();\n        }, 2000);\n      }) // Catch is an error... its just an error\n      .catch(function (error) {\n        console.log('Error on preStart for Countdown.js', error);\n      }); // Controls timing delay for clock start\n\n      window.setTimeout(function () {\n        _this.createTimerInterval();\n      }, 2000);\n    };\n\n    _this.holdTimer = function () {\n      clearInterval(_this.timer);\n\n      _this.props.dispatch({\n        type: 'MASTER_TIMER_SET_ALL',\n        payload: {\n          timerOn: true,\n          timerCount: _this.props.store.currentTime.timerTime,\n          timerStart: _this.props.store.currentTime.timerTime\n        }\n      });\n    };\n\n    _this.stopTimer = function () {\n      clearInterval(_this.timer);\n\n      _this.props.dispatch({\n        type: 'MASTER_TIMER_ON',\n        payload: false\n      });\n    };\n\n    _this.resetTimer = function () {\n      _this.props.dispatch({\n        type: 'MASTER_TIMER_COUNT',\n        payload: _this.props.store.masterTime.timerStart\n      });\n    };\n\n    _this.resumeTimer = function () {\n      _this.props.dispatch({\n        type: 'MASTER_TIMER_ON',\n        payload: true\n      });\n\n      _this.createTimerInterval();\n    };\n\n    return _this;\n  }\n\n  _createClass(MasterCountdown, [{\n    key: \"createTimerInterval\",\n    value: function createTimerInterval() {\n      var _this2 = this;\n\n      this.timer = setInterval(function () {\n        var newTime = _this2.props.store.masterTime.timerCount - 10;\n\n        if (newTime >= 0) {\n          _this2.props.dispatch({\n            type: 'MASTER_TIMER_COUNT',\n            payload: newTime\n          });\n        } else {\n          clearInterval(_this2.timer);\n\n          _this2.props.dispatch({\n            type: 'MASTER_TIMER_ON',\n            payload: false\n          });\n\n          alert(\"Master Countdown Ended\");\n        }\n      }, 10);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"button\", {\n        onClick: this.holdTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Hold\"), React.createElement(\"button\", {\n        onClick: this.stopTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Resume\"), React.createElement(\"button\", {\n        onClick: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return MasterCountdown;\n}(Component);\n\nexport default connect(mapReduxStoreToProps)(MasterCountdown);","map":{"version":3,"sources":["/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/src/components/MasterCountdown.js"],"names":["React","Component","connect","mapReduxStoreToProps","Api","MasterCountdown","startTimer","props","dispatch","type","payload","timerOn","timerCount","store","currentTime","timerTime","timerStart","apiArray","countdownTimers","clock","apiObj","id","status","push","postTime","Promise","all","then","response","window","setTimeout","catch","error","console","log","createTimerInterval","holdTimer","clearInterval","timer","stopTimer","resetTimer","masterTime","resumeTimer","setInterval","newTime","alert"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;IAEMC,e;;;;;;;;;;;;;;;;;;UAoBFC,U,GAAa,YAAM;AACf,YAAKC,KAAL,CAAWC,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,sBADU;AAEhBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,UAAU,EAAE,MAAKL,KAAL,CAAWM,KAAX,CAAiBC,WAAjB,CAA6BC,SAFpC;AAGLC,UAAAA,UAAU,EAAE,MAAKT,KAAL,CAAWM,KAAX,CAAiBC,WAAjB,CAA6BC;AAHpC;AAFO,OAApB,EADe,CASf;AACA;AACA;;;AACA,UAAME,QAAQ,GAAG,EAAjB,CAZe,CAaf;;AAbe;AAAA;AAAA;;AAAA;AAcf,6BAAkB,MAAKV,KAAL,CAAWM,KAAX,CAAiBK,eAAnC,8HAAoD;AAAA,cAA3CC,KAA2C;;AAChD,cAAMC,MAAM,qBACL,MAAKb,KAAL,CAAWM,KAAX,CAAiBC,WADZ;AAERO,YAAAA,EAAE,EAAEF,KAAK,CAACE,EAFF;AAGRC,YAAAA,MAAM,EAAE;AAHA,YAAZ;;AAKAL,UAAAA,QAAQ,CAACM,IAAT,CAAcnB,GAAG,CAACoB,QAAJ,CAAaJ,MAAb,CAAd;AACH,SArBc,CAsBf;;AAtBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBfK,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EACI;AADJ,OAEKU,IAFL,CAEU,UAACC,QAAD,EAAc;AAChBC,QAAAA,MAAM,CAACC,UAAP,CAAkB,YAAM;AACxB,gBAAKxB,UAAL;AACC,SAFD,EAEG,IAFH;AAGH,OANL,EAOI;AAPJ,OAQKyB,KARL,CAQW,UAACC,KAAD,EAAW;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,KAAlD;AACH,OAVL,EAvBe,CAkCf;;AACAH,MAAAA,MAAM,CAACC,UAAP,CAAkB,YAAM;AACpB,cAAKK,mBAAL;AACH,OAFD,EAEG,IAFH;AAGH,K;;UAEDC,S,GAAY,YAAM;AACdC,MAAAA,aAAa,CAAC,MAAKC,KAAN,CAAb;;AACA,YAAK/B,KAAL,CAAWC,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,sBADU;AAEhBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,UAAU,EAAE,MAAKL,KAAL,CAAWM,KAAX,CAAiBC,WAAjB,CAA6BC,SAFpC;AAGLC,UAAAA,UAAU,EAAE,MAAKT,KAAL,CAAWM,KAAX,CAAiBC,WAAjB,CAA6BC;AAHpC;AAFO,OAApB;AAQH,K;;UAEDwB,S,GAAY,YAAM;AACdF,MAAAA,aAAa,CAAC,MAAKC,KAAN,CAAb;;AACA,YAAK/B,KAAL,CAAWC,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,iBADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAApB;AAIH,K;;UAED8B,U,GAAa,YAAM;AACf,YAAKjC,KAAL,CAAWC,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,oBADU;AAEhBC,QAAAA,OAAO,EAAE,MAAKH,KAAL,CAAWM,KAAX,CAAiB4B,UAAjB,CAA4BzB;AAFrB,OAApB;AAIH,K;;UAED0B,W,GAAc,YAAM;AAChB,YAAKnC,KAAL,CAAWC,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,iBADU;AAEhBC,QAAAA,OAAO,EAAE;AAFO,OAApB;;AAIA,YAAKyB,mBAAL;AACH,K;;;;;;;0CA5FsB;AAAA;;AACnB,WAAKG,KAAL,GAAaK,WAAW,CAAC,YAAM;AAC3B,YAAMC,OAAO,GAAG,MAAI,CAACrC,KAAL,CAAWM,KAAX,CAAiB4B,UAAjB,CAA4B7B,UAA5B,GAAyC,EAAzD;;AACA,YAAIgC,OAAO,IAAI,CAAf,EAAkB;AACd,UAAA,MAAI,CAACrC,KAAL,CAAWC,QAAX,CAAoB;AAChBC,YAAAA,IAAI,EAAE,oBADU;AAEhBC,YAAAA,OAAO,EAAEkC;AAFO,WAApB;AAIH,SALD,MAKO;AACHP,UAAAA,aAAa,CAAC,MAAI,CAACC,KAAN,CAAb;;AACA,UAAA,MAAI,CAAC/B,KAAL,CAAWC,QAAX,CAAoB;AAChBC,YAAAA,IAAI,EAAE,iBADU;AAEhBC,YAAAA,OAAO,EAAE;AAFO,WAApB;;AAIAmC,UAAAA,KAAK,CAAC,wBAAD,CAAL;AACH;AACJ,OAfuB,EAerB,EAfqB,CAAxB;AAgBH;;;6BA6EQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,KAAKvC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAQ,QAAA,OAAO,EAAE,KAAK8B,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AAAQ,QAAA,OAAO,EAAE,KAAKG,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAII;AAAQ,QAAA,OAAO,EAAE,KAAKjC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,EAKI;AAAQ,QAAA,OAAO,EAAE,KAAKkC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,CADJ;AASH;;;;EAzGyBvC,S;;AA2G9B,eAAeC,OAAO,CAACC,oBAAD,CAAP,CAA8BE,eAA9B,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nclass MasterCountdown extends Component {\n    createTimerInterval () {\n        this.timer = setInterval(() => {\n            const newTime = this.props.store.masterTime.timerCount - 10;\n            if (newTime >= 0) {\n                this.props.dispatch({\n                    type: 'MASTER_TIMER_COUNT',\n                    payload: newTime\n                });\n            } else {\n                clearInterval(this.timer);\n                this.props.dispatch({ \n                    type: 'MASTER_TIMER_ON',\n                    payload: false\n                });\n                alert(\"Master Countdown Ended\");\n            }\n        }, 10);\n    };\n    \n    startTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime\n            }\n        });\n        // Creates Promises for all clocks if different endpoints are needed\n        // Hope only one endpoint is needed\n        // First create empty array\n        const apiArray = [];\n        // Fill using a for loop\n        for (let clock of this.props.store.countdownTimers) {\n            const apiObj = {\n                ...this.props.store.currentTime,\n                id: clock.id,\n                status: 'start'\n            };\n            apiArray.push(Api.postTime(apiObj));\n        }\n        // Send promise for all\n        Promise.all(apiArray)\n            // Then is a response to make sure that it was successful to hit api\n            .then((response) => {\n                window.setTimeout(() => {\n                this.startTimer()\n                }, 2000);\n            })\n            // Catch is an error... its just an error\n            .catch((error) => {\n                console.log('Error on preStart for Countdown.js', error);\n            });\n        // Controls timing delay for clock start\n        window.setTimeout(() => {\n            this.createTimerInterval();        \n        }, 2000);\n    };\n\n    holdTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime   \n            }\n        });\n    };\n    \n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({ \n            type: 'MASTER_TIMER_ON',\n            payload: false\n        });\n    };\n\n    resetTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_COUNT',\n            payload: this.props.store.masterTime.timerStart\n        });\n    };\n\n    resumeTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_ON',\n            payload: true\n        });\n        this.createTimerInterval();\n    }\n\n    render (){\n        return (\n            <div>\n                <button onClick={this.startTimer}>Start</button>\n                <button onClick={this.holdTimer}>Hold</button>\n                <button onClick={this.stopTimer}>Stop</button>\n                <button onClick={this.startTimer}>Resume</button>\n                <button onClick={this.resetTimer}>Reset</button>\n            </div>\n        );\n    }\n}\nexport default connect(mapReduxStoreToProps)(MasterCountdown);"]},"metadata":{},"sourceType":"module"}