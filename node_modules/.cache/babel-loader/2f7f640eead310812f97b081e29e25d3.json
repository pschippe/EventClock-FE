{"ast":null,"code":"import _defineProperty from \"/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar defaultCurrentTime = {\n  hours: '00',\n  minutes: '00',\n  seconds: '00',\n  timerTime: 0\n};\n\nvar currentTime = function currentTime() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultCurrentTime;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CURRENT_TIME_HOURS':\n      var newStateHrs = addTimeToState(state, 'hours', action.payload);\n      console.log(newStateHrs);\n      return newStateHrs;\n\n    case 'CURRENT_TIME_MINUTES':\n      var newStateMin = addTimeToState(state, 'minutes', action.payload);\n      console.log(newStateMin);\n      return newStateMin;\n\n    case 'CURRENT_TIME_SECONDS':\n      var newStateSec = addTimeToState(state, 'seconds', action.payload);\n      console.log(newStateSec);\n      return newStateSec;\n\n    default:\n      return state;\n  }\n};\n\nfunction addTimeToState(currState, timeKey, timeValue) {\n  var timeAsNumber = parseInt(timeValue);\n  var timeDoubleDigit = makeTimeDoubleDigit(timeValue);\n\n  var newTimeState = _objectSpread({}, currState);\n\n  newTimeState[timeKey] = timeDoubleDigit;\n  newTimeState.timerTime = timeConverter(currState.timerTime, timeAsNumber, timeKey);\n}\n\nfunction makeTimeDoubleDigit(timeStr) {\n  var doubleDigit = '00';\n\n  if (timeStr.length < 2 && timeStr.length !== 0) {\n    doubleDigit = \"0\".concat(timeStr);\n  }\n\n  return doubleDigit;\n}\n\nfunction timeConverter(baseTime, newTime, timeType) {\n  var finalTime = baseTime;\n  var conversion = 1;\n\n  if (timeType === 'hours') {\n    conversion = 1000 * 60 * 60;\n  } else if (timeType === 'minutes') {\n    conversion = 1000 * 60;\n  } else if (timeType === 'seconds') {\n    conversion = 1000;\n  }\n\n  finalTime = finalTime + newTime * conversion;\n  return finalTime;\n}\n\nexport default currentTime;","map":{"version":3,"sources":["/Users/patrickschippers/DEV/SideProj/ClockControl/sandBox/EventClock-FE/src/redux/reducers/currentTime.reducer.js"],"names":["defaultCurrentTime","hours","minutes","seconds","timerTime","currentTime","state","action","type","newStateHrs","addTimeToState","payload","console","log","newStateMin","newStateSec","currState","timeKey","timeValue","timeAsNumber","parseInt","timeDoubleDigit","makeTimeDoubleDigit","newTimeState","timeConverter","timeStr","doubleDigit","length","baseTime","newTime","timeType","finalTime","conversion"],"mappings":";;;;;;AAAA,IAAMA,kBAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAE,IADgB;AAEvBC,EAAAA,OAAO,EAAE,IAFc;AAGvBC,EAAAA,OAAO,EAAE,IAHc;AAIvBC,EAAAA,SAAS,EAAE;AAJY,CAA3B;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAwC;AAAA,MAAvCC,KAAuC,uEAA/BN,kBAA+B;AAAA,MAAXO,MAAW;;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,oBAAL;AACI,UAAMC,WAAW,GAAGC,cAAc,CAACJ,KAAD,EAAQ,OAAR,EAAiBC,MAAM,CAACI,OAAxB,CAAlC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,aAAOA,WAAP;;AACJ,SAAK,sBAAL;AACI,UAAMK,WAAW,GAAGJ,cAAc,CAACJ,KAAD,EAAQ,SAAR,EAAmBC,MAAM,CAACI,OAA1B,CAAlC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACA,aAAOA,WAAP;;AACJ,SAAK,sBAAL;AACI,UAAMC,WAAW,GAAGL,cAAc,CAACJ,KAAD,EAAQ,SAAR,EAAmBC,MAAM,CAACI,OAA1B,CAAlC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;AACA,aAAOA,WAAP;;AACJ;AACI,aAAOT,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,SAASI,cAAT,CAAwBM,SAAxB,EAAmCC,OAAnC,EAA4CC,SAA5C,EAAuD;AACnD,MAAMC,YAAY,GAAGC,QAAQ,CAACF,SAAD,CAA7B;AACA,MAAMG,eAAe,GAAGC,mBAAmB,CAACJ,SAAD,CAA3C;;AACA,MAAMK,YAAY,qBACXP,SADW,CAAlB;;AAGAO,EAAAA,YAAY,CAACN,OAAD,CAAZ,GAAwBI,eAAxB;AACAE,EAAAA,YAAY,CAACnB,SAAb,GAAyBoB,aAAa,CAACR,SAAS,CAACZ,SAAX,EAAsBe,YAAtB,EAAoCF,OAApC,CAAtC;AAEH;;AAED,SAASK,mBAAT,CAA6BG,OAA7B,EAAsC;AAClC,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAID,OAAO,CAACE,MAAR,GAAiB,CAAjB,IAAsBF,OAAO,CAACE,MAAR,KAAmB,CAA7C,EAAgD;AAC5CD,IAAAA,WAAW,cAAOD,OAAP,CAAX;AACH;;AAED,SAAOC,WAAP;AACH;;AAED,SAASF,aAAT,CAAuBI,QAAvB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAChD,MAAIC,SAAS,GAAGH,QAAhB;AACA,MAAII,UAAU,GAAG,CAAjB;;AAEA,MAAIF,QAAQ,KAAK,OAAjB,EAA0B;AACtBE,IAAAA,UAAU,GAAG,OAAO,EAAP,GAAY,EAAzB;AACH,GAFD,MAEO,IAAIF,QAAQ,KAAK,SAAjB,EAA4B;AAC/BE,IAAAA,UAAU,GAAG,OAAO,EAApB;AACH,GAFM,MAEA,IAAIF,QAAQ,KAAK,SAAjB,EAA4B;AAC/BE,IAAAA,UAAU,GAAG,IAAb;AACH;;AACDD,EAAAA,SAAS,GAAGA,SAAS,GAAIF,OAAO,GAAGG,UAAnC;AAEA,SAAOD,SAAP;AACH;;AAED,eAAe1B,WAAf","sourcesContent":["const defaultCurrentTime = {\n    hours: '00',\n    minutes: '00',\n    seconds: '00',\n    timerTime: 0,\n};\n\nconst currentTime = (state = defaultCurrentTime, action) => {\n    switch (action.type) {\n        case 'CURRENT_TIME_HOURS':\n            const newStateHrs = addTimeToState(state, 'hours', action.payload);\n            console.log(newStateHrs);\n            return newStateHrs;\n        case 'CURRENT_TIME_MINUTES':\n            const newStateMin = addTimeToState(state, 'minutes', action.payload);\n            console.log(newStateMin);\n            return newStateMin;\n        case 'CURRENT_TIME_SECONDS':\n            const newStateSec = addTimeToState(state, 'seconds', action.payload);\n            console.log(newStateSec);\n            return newStateSec;\n        default:\n            return state;\n    }\n}\n\nfunction addTimeToState(currState, timeKey, timeValue) {\n    const timeAsNumber = parseInt(timeValue);\n    const timeDoubleDigit = makeTimeDoubleDigit(timeValue);\n    const newTimeState = {\n        ...currState,\n    };\n    newTimeState[timeKey] = timeDoubleDigit;\n    newTimeState.timerTime = timeConverter(currState.timerTime, timeAsNumber, timeKey);\n\n}\n\nfunction makeTimeDoubleDigit(timeStr) {\n    let doubleDigit = '00';\n\n    if (timeStr.length < 2 && timeStr.length !== 0) {\n        doubleDigit = `0${timeStr}`;\n    }\n\n    return doubleDigit;\n}\n\nfunction timeConverter(baseTime, newTime, timeType) {\n    let finalTime = baseTime;\n    let conversion = 1;\n\n    if (timeType === 'hours') {\n        conversion = 1000 * 60 * 60;\n    } else if (timeType === 'minutes') {\n        conversion = 1000 * 60;\n    } else if (timeType === 'seconds') {\n        conversion = 1000;\n    }\n    finalTime = finalTime + (newTime * conversion);\n\n    return finalTime;\n}\n\nexport default currentTime;"]},"metadata":{},"sourceType":"module"}