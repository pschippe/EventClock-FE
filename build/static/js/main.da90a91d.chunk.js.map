{"version":3,"sources":["redux/mapReduxStoreToProps.js","api.js","components/Countdown.js","components/MasterCountdown.js","components/TimerInput.js","App.js","redux/reducers/countdownTimers.reducer.js","redux/reducers/currentTime.reducer.js","redux/reducers/masterTime.reducer.js","redux/store.js","index.js"],"names":["mapReduxStoreToProps","reduxState","store","api","baseAxios","axios","create","baseURL","postObj","this","post","time","concat","hours","minutes","seconds","fulltime","timerTime","id","status","Countdown","state","timerOn","timerStart","timerID","inputHrs","inputMin","inputSec","preStart","_this","setState","props","currentTime","Api","postTime","_objectSpread","then","response","window","setTimeout","startTimer","catch","error","console","log","timer","setInterval","newTime","clearInterval","alert","stopTimer","resetTimer","resetMasterCallback","_this$state","disableButtons","masterTime","timerCount","Math","floor","slice","react_default","a","createElement","className","onClick","disabled","Component","connect","MasterCountdown","dispatch","type","payload","apiArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","countdownTimers","Symbol","iterator","next","done","clock","value","apiObj","MasterCountdown_objectSpread","push","err","return","Promise","all","createTimerInterval","holdTimer","resumeTimer","_this2","TimerInput","changeInputTime","event","timeKey","newState","parseInt","target","toUpperCase","onChange","required","App","indvTimer","allTimers","masterStart","startAll","timeObj","startIndvCountdown","countdownIndex","timeConv","timersArray","Object","toConsumableArray","timers","resetMaster","rmClocks","map","index","components_Countdown","key","components_TimerInput","components_MasterCountdown","React","defaultCounntdowns","arguments","length","action","defaultCurrentTime","addTimeToState","currState","timeValue","timeAsNumber","timeDoubleDigit","timeStr","doubleDigit","makeTimeDoubleDigit","newTimeState","currentTime_reducer_objectSpread","baseTime","timeType","finalTime","conversion","timeConverter","newStateHrs","newStateMin","newStateSec","masterTime_reducer_objectSpread","createStore","combineReducers","store_objectSpread","allReducers","applyMiddleware","logger","ReactDom","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.da90a91d.chunk.js","sourcesContent":["const mapReduxStoreToProps = reduxState => ({\n    store: reduxState,\n});\n\nexport default mapReduxStoreToProps;","import axios from 'axios';\n\nclass Api {\n    baseAxios = axios.create({\n        baseURL: 'http://jsonplaceholder.typicode.com/'\n    });\n\n    // Create another method for Master if changes are too extensive or if new api call is needed\n    postTime (postObj) {\n        return this.baseAxios.post(`/clockwerx/power`, {\n            time: `${postObj.hours}:${postObj.minutes}:${postObj.seconds}`,\n            fulltime: postObj.timerTime,\n            id: postObj.id,\n            status: postObj.status\n        });\n    }\n};\n\nexport default new Api();","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nclass Countdown extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0,\n    timerID: '',\n    inputHrs: 0,\n    inputMin: 0,\n    inputSec: 0,\n  };\n\n  preStart = () => {\n    this.setState({\n      timerTime: this.props.store.currentTime.timerTime,\n    }, () => {\n      // Setting up post for api call, needs to match endpoint titles and information\n      Api.postTime({\n        ...this.props.store.currentTime,\n        id: this.props.id,\n        status: 'start'\n      })\n      // Then is a response to make sure that it was successful to hit api\n      .then((response) => {\n        window.setTimeout(() => {\n          this.startTimer()\n        }, 2000);\n      })\n      // Catch is an error... its just an error\n      .catch((error) => {\n        console.log('Error on preStart for Countdown.js', error);\n      });\n      // Remove when endpoints are working\n      window.setTimeout(() => {\n        this.startTimer()\n      }, 2000);\n    });\n  }\n\n  startTimer = () => {\n    // TODO: Use npm install \"axios\" for ajax call to backend\n    this.setState({\n      timerOn: true,\n      timerStart: this.state.timerTime\n    });\n    \n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 10;\n      if (newTime >= 0) {\n        this.setState({\n          timerTime: newTime\n        });\n      } else {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false });\n        alert(\"Countdown Ended\");\n      }\n    }, 10);\n  };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    this.setState({ timerOn: false });\n  };\n\n  resetTimer = () => {\n    this.setState({\n      timerTime: this.state.timerStart\n    });\n  };\n\n  startForMaster() {\n    this.props.resetMasterCallback();\n    this.preStart();\n  }\n\n  render() {\n    let { timerTime, timerStart, timerOn } = this.state;\n    let disableButtons = false;\n\n    if (this.props.store.masterTime.timerOn === true) {\n      timerTime = this.props.store.masterTime.timerCount;\n      timerStart = this.props.store.masterTime.timerStart;\n      timerOn = this.props.store.masterTime.timerOn;\n      disableButtons = true;\n    }\n    \n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n\n    return (\n      <div id={this.props.id} className=\"roomClock\">\n        <div className=\"roomClock-hd\">{this.props.id}</div>\n        <div className=\"roomClock-bd\">\n          <div className=\"timer\">\n            <div className=\"timer-display\">\n              {hours} : {minutes} : {seconds}\n            </div>\n            <div className=\"timer-control\">\n              {timerOn === false &&\n                (timerStart === 0 || timerTime === timerStart) && (\n                  <button className=\"btn btn_start\" onClick={this.preStart} disabled={disableButtons}>Start</button>\n                )}\n              {timerOn === true && timerTime >= 1000 && (\n                <button className=\"btn btn_stop\" onClick={this.stopTimer} disabled={disableButtons}>Stop</button>\n              )}\n              {timerOn === false &&\n                (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                  <button className=\"btn btn_start\" onClick={this.startTimer} disabled={disableButtons}>Resume</button>\n                )}\n              {(timerOn === false || timerTime < 1000) && (\n                <button className=\"btn btn_reset\" onClick={this.resetTimer} disabled={disableButtons}>Reset</button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(Countdown);\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nclass MasterCountdown extends Component {\n    createTimerInterval () {\n        this.timer = setInterval(() => {\n            const newTime = this.props.store.masterTime.timerCount - 10;\n            if (newTime >= 0) {\n                this.props.dispatch({\n                    type: 'MASTER_TIMER_COUNT',\n                    payload: newTime\n                });\n            } else {\n                clearInterval(this.timer);\n                this.props.dispatch({ \n                    type: 'MASTER_TIMER_ON',\n                    payload: false\n                });\n                alert(\"Master Countdown Ended\");\n            }\n        }, 10);\n    };\n    \n    startTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime\n            }\n        });\n        // Creates Promises for all clocks if different endpoints are needed\n        // Hope only one endpoint is needed\n        // First create empty array\n        const apiArray = [];\n        // Fill using a for loop\n        for (let clock of this.props.store.countdownTimers) {\n            const apiObj = {\n                ...this.props.store.currentTime,\n                id: clock.id,\n                status: 'start'\n            };\n            apiArray.push(Api.postTime(apiObj));\n        }\n        // Send promise for all\n        Promise.all(apiArray)\n            // Then is a response to make sure that it was successful to hit api\n            .then((response) => {\n                window.setTimeout(() => {\n                this.startTimer()\n                }, 2000);\n            })\n            // Catch is an error... its just an error\n            .catch((error) => {\n                console.log('Error on preStart for Countdown.js', error);\n            });\n        // Controls timing delay for clock start\n        window.setTimeout(() => {\n            this.createTimerInterval();        \n        }, 2000);\n    };\n\n    holdTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime   \n            }\n        });\n    };\n    \n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({ \n            type: 'MASTER_TIMER_ON',\n            payload: false\n        });\n    };\n\n    resetTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_COUNT',\n            payload: this.props.store.masterTime.timerStart\n        });\n    };\n\n    resumeTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_ON',\n            payload: true\n        });\n        this.createTimerInterval();\n    }\n\n    render (){\n        return (\n            <div>\n                <button onClick={this.startTimer}>Start</button>\n                <button onClick={this.holdTimer}>Hold</button>\n                <button onClick={this.stopTimer}>Stop</button>\n                <button onClick={this.startTimer}>Resume</button>\n                <button onClick={this.resetTimer}>Reset</button>\n            </div>\n        );\n    }\n}\nexport default connect(mapReduxStoreToProps)(MasterCountdown);","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\n\nclass TimerInput extends Component {\n  state = {\n    inputHrs: 0,\n    inputMin: 0,\n    inputSec: 0\n  };\n\n  changeInputTime = (event, timeKey) => {\n    const newState = this.state;\n    newState[timeKey] = parseInt(event.target.value);\n    this.setState(newState);\n\n    this.props.dispatch({\n      type: `CURRENT_TIME_${timeKey.toUpperCase()}`,\n      payload: event.target.value,\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"hours\")}\n          className=\"field-item field-item_hrs\"\n          required\n        />\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"minutes\")}\n          className=\"field-item field-item_min\"\n          required\n        />\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"seconds\")}\n          className=\"field-item field-item_sec\"\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(TimerInput);\n","import React, { Component } from \"react\";\nimport Countdown from \"./components/Countdown\";\nimport MasterCountdown from \"./components/MasterCountdown\";\nimport TimerInput from \"./components/TimerInput\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from './redux/mapReduxStoreToProps';\n\nclass App extends React.Component {\n  state = {\n    indvTimer: 0,\n    allTimers: 0,\n    currentTime: 0,\n    masterStart: false\n  };\n\n  // setTimer = timeObj => {\n  //   this.setState({\n  //     indvTimer: `${timeObj.inputHrs}:${timeObj.inputMin}:${timeObj.inputSec}`,\n  //     currentTime: timeObj\n  //   });\n  // };\n\n  startAll = timeObj => {\n    this.setState({\n      allTimers: `${timeObj.inputHrs}:${timeObj.inputMin}:${timeObj.inputSec}`,\n      masterStart: true\n    });\n  };\n\n  startIndvCountdown = (countdownIndex, timeConv) => {\n    const timersArray = [...this.state.timers];\n    timersArray[countdownIndex] = timeConv;\n    this.setState({ timers: timersArray });\n  };\n\n  resetMaster = () => {\n    this.setState({\n      masterStart: false\n    })\n  }\n\n  render() {\n    const {\n      store,\n    } = this.props;\n    const rmClocks = store.countdownTimers.map((timers, index) => {\n      return (\n        <Countdown\n          id={timers.id}\n          masterStart={this.state.masterStart}\n          resetMasterCallback={this.resetMaster}\n          key={index}\n          index={index} \n        />\n      );\n    });\n    return (\n      <div className=\"appBody\">\n        <div className=\"appBody-hd\">\n          <h1 className=\"hdg hdg_max\">ClockWerx</h1>\n          <h2 className=\"hdg hdg_3\">Events clock timer control</h2>\n        </div>\n        <div className=\"appBody-bd appBody-bd_split\">\n          <div className=\"grid\">\n            <div className=\"grid-col grid-col_5of12\">\n              <div className=\"clockList\">\n                {rmClocks}\n              </div>\n            </div>\n            <div className=\"grid-col grid-col_7of12\">\n              <div className=\"\">\n                <TimerInput\n                  startAll={this.startAll}\n                />\n                <MasterCountdown />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(App);\n","const defaultCounntdowns = [\n    {\n        id: 'Auditorium',\n        time: 0\n    },\n    {\n        id: 'BlackSea',\n        time: 0\n    },\n    {\n        id: 'Marathon',\n        time: 0\n    },\n    {\n        id: 'Tours',\n        time: 0\n    }\n];\n\n// const action = {\n//      type: 'ADD_TIMER',\n//      payload: {\n//         id: 'room03',\n//         time: 0\n//      }\n// }\nconst countdownTimers = (state = defaultCounntdowns, action) => {\n    switch (action.type) {\n        case 'ADD_TIMER':\n            return [ ...state, action.payload ];\n        default:\n            return state;\n    }\n};\n\nexport default countdownTimers;","const defaultCurrentTime = {\n    hours: '00',\n    minutes: '00',\n    seconds: '00',\n    timerTime: 0,\n};\n\nconst currentTime = (state = defaultCurrentTime, action) => {\n    switch (action.type) {\n        case 'CURRENT_TIME_HOURS':\n            const newStateHrs = addTimeToState(state, 'hours', action.payload);\n            console.log(newStateHrs);\n            return newStateHrs;\n        case 'CURRENT_TIME_MINUTES':\n            const newStateMin = addTimeToState(state, 'minutes', action.payload);\n            console.log(newStateMin);\n            return newStateMin;\n        case 'CURRENT_TIME_SECONDS':\n            const newStateSec = addTimeToState(state, 'seconds', action.payload);\n            console.log(newStateSec);\n            return newStateSec;\n        default:\n            return state;\n    }\n}\n\nfunction addTimeToState(currState, timeKey, timeValue) {\n    const timeAsNumber = parseInt(timeValue);\n    const timeDoubleDigit = makeTimeDoubleDigit(timeValue);\n    const newTimeState = {\n        ...currState,\n    };\n    newTimeState[timeKey] = timeDoubleDigit;\n    newTimeState.timerTime = timeConverter(currState.timerTime, timeAsNumber, timeKey);\n    return newTimeState;\n}\n\nfunction makeTimeDoubleDigit(timeStr) {\n    let doubleDigit = '00';\n\n    if (timeStr.length < 2 && timeStr.length !== 0) {\n        doubleDigit = `0${timeStr}`;\n    }\n\n    return doubleDigit;\n}\n\n//TODO: Can remove baseTime from function\nfunction timeConverter(baseTime, newTime, timeType) {\n    let finalTime = 0;\n    let conversion = 1;\n\n    if (timeType === 'hours') {\n        conversion = 1000 * 60 * 60;\n    } else if (timeType === 'minutes') {\n        conversion = 1000 * 60;\n    } else if (timeType === 'seconds') {\n        conversion = 1000;\n    }\n    finalTime = finalTime + (newTime * conversion);\n\n    return finalTime;\n}\n\nexport default currentTime;","const masterTime = (state = {}, action) => {\n    // Update Timer count\n    switch (action.type) {\n        case 'MASTER_TIMER_COUNT':\n            return {\n                ...state,\n                timerCount: action.payload\n            };\n        case 'MASTER_TIMER_ON':\n            return {\n                ...state,\n                timerOn: action.payload\n            };\n        case 'MASTER_TIMER_START':\n            return {\n                ...state,\n                timerStart: action.payload\n            }\n        case 'MASTER_TIMER_SET_ALL':\n            return {\n                ...state,\n                timerCount: action.payload.timerCount,\n                timerOn: action.payload.timerOn,\n                timerStart: action.payload.timerStart\n            }\n        default:\n            return state;\n    }\n    \n    return state;\n}\n\nexport default masterTime;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport * as allReducers from './reducers/all.reducers';\n\nconst store = createStore(\n    combineReducers({\n        ...allReducers,\n    }),\n    applyMiddleware(logger),\n);\n\nexport default store;","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport App from \"./App\";\nimport \"./styles.scss\";\nimport store from './redux/store';\n\n// ========================================\n\nReactDom.render(<Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\n"],"sourceRoot":""}